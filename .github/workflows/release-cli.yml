name: Release CLI

on:
  push:
    branches: [main]
    paths:
      - 'packages/cli/**'
      - '.github/workflows/release-cli.yml'

permissions:
  contents: write
  id-token: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.18.3

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: pnpm

      - name: Extract version
        id: version
        run: |
          VERSION=$(node -p "require('./packages/cli/package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=cli/v$VERSION" >> $GITHUB_OUTPUT

      - name: Check if tag exists
        id: tag_check
        run: |
          if git rev-parse "${{ steps.version.outputs.tag }}" >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Get last CLI release tag
        id: last_release
        if: steps.tag_check.outputs.exists == 'false'
        run: |
          LAST_TAG=$(git tag -l "cli/v*" --sort=-v:refname | head -n 1)
          if [ -z "$LAST_TAG" ]; then
            # If no previous tag, use first commit
            LAST_TAG=$(git rev-list --max-parents=0 HEAD)
          fi
          echo "tag=$LAST_TAG" >> $GITHUB_OUTPUT

      - name: Extract changelog for this version
        id: changelog
        if: steps.tag_check.outputs.exists == 'false'
        run: |
          VERSION="${{ steps.version.outputs.version }}"

          # Extract the section for this version from CHANGELOG.md
          CHANGELOG=$(awk "/^## \[$VERSION\]/{flag=1; next} /^## \[/{flag=0} flag" packages/cli/CHANGELOG.md)

          if [ -z "$CHANGELOG" ]; then
            echo "ERROR: No changelog entry found for version $VERSION in packages/cli/CHANGELOG.md"
            exit 1
          fi

          # Set output using delimiter
          {
            echo 'notes<<EOF'
            echo "$CHANGELOG"
            echo EOF
          } >> $GITHUB_OUTPUT

      - name: Create tag
        if: steps.tag_check.outputs.exists == 'false'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "${{ steps.version.outputs.tag }}" -m "Release CLI v${{ steps.version.outputs.version }}"
          git push origin "${{ steps.version.outputs.tag }}"

      - name: Create draft release
        if: steps.tag_check.outputs.exists == 'false'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cat > release_notes.md << 'EOF'
          ${{ steps.changelog.outputs.notes }}
          EOF

          gh release create "${{ steps.version.outputs.tag }}" \
            --draft \
            --title "CLI v${{ steps.version.outputs.version }}" \
            --notes-file release_notes.md
